// Generated by ts-to-zod
import { z } from "zod";

export const simplifiedJsDocTagSchema = z.object({
  name: z.string(),
  value: z.string().optional(),
});

export const getSchemaNameSchema = z.function({
  input: [z.string()],
  output: z.string(),
});

export const nameFilterSchema = z.function({
  input: [z.string()],
  output: z.boolean(),
});

export const jsDocTagFilterSchema = z.function({
  input: [z.array(simplifiedJsDocTagSchema)],
  output: z.boolean(),
});

export const customJsDocFormatTypeAttributesSchema = z.object({
  regex: z.string(),
  errorMessage: z.string().optional(),
});

export const customJsDocFormatTypeSchema = z.string();

export const customJsDocFormatTypesSchema = z.record(
  customJsDocFormatTypeSchema,
  z.union([z.string(), customJsDocFormatTypeAttributesSchema])
);

export const configSchema = z.object({
  input: z.string(),
  output: z.string(),
  skipValidation: z.boolean().optional(),
  nameFilter: nameFilterSchema.optional(),
  jsDocTagFilter: jsDocTagFilterSchema.optional(),
  getSchemaName: getSchemaNameSchema.optional(),
  keepComments: z.boolean().optional().default(false),
  skipParseJSDoc: z.boolean().optional().default(false),
  inferredTypes: z.string().optional(),
  customJSDocFormatTypes: customJsDocFormatTypesSchema.optional(),
  moduleResolution: z
    .union([
      z.literal("node10"),
      z.literal("node16"),
      z.literal("nodenext"),
      z.literal("bundler"),
      z.literal("classic"),
    ])
    .optional(),
});

export const configsSchema = z.array(
  configSchema.and(
    z.object({
      name: z.string(),
    })
  )
);

export const inputOutputMappingSchema = configSchema.pick({
  input: true,
  output: true,
  getSchemaName: true,
});

export const tsToZodConfigSchema = z.union([configSchema, configsSchema]);
