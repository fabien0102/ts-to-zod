// Generated by ts-to-zod
import { z } from "zod";

const createFunctionSchema = <T extends z.core.$ZodFunction>(schema: T) => {
  const wrapped = z.custom<Parameters<T["implement"]>[0]>((fn) =>
    schema.implement(fn as Parameters<T["implement"]>[0])
  );
  // Copy essential methods to preserve API compatibility
  Object.defineProperty(wrapped, "implement", {
    value: (fn: Parameters<T["implement"]>[0]) => schema.implement(fn),
    enumerable: false,
    writable: false,
  });
  return wrapped;
};

const createAsyncFunctionSchema = <T extends z.core.$ZodFunction>(
  schema: T
) => {
  const wrapped = z.custom<Parameters<T["implementAsync"]>[0]>((fn) =>
    schema.implementAsync(fn as Parameters<T["implementAsync"]>[0])
  );
  Object.defineProperty(wrapped, "implementAsync", {
    value: (fn: Parameters<T["implementAsync"]>[0]) =>
      schema.implementAsync(fn),
    enumerable: false,
    writable: false,
  });
  Object.defineProperty(wrapped, "implement", {
    value: (fn: Parameters<T["implement"]>[0]) => schema.implement(fn),
    enumerable: false,
    writable: false,
  });
  return wrapped;
};
export const testFunctionSchema = createFunctionSchema(
  z.function({ input: [z.string()], output: z.number() })
);

export const testAsyncFunctionSchema = createAsyncFunctionSchema(
  z.function({ input: [z.string()], output: z.any() })
);
